//描述
//有一个长度为 n 的非降序数组，比如[1,2,3,4,5]，将它进行旋转，即把一个数组最开始的若干个元素搬到数组的末尾，变成一个旋转数组，比如变成了[3,4,5,1,2]，或者[4,5,1,2,3]这样的。请问，给定这样一个旋转数组，求数组中的最小值。
//
//数据范围：1 <= n <= 100001≤n≤10000，数组中任意元素的值: 0 <= val <= 100000
//要求：空间复杂度：O(1)O(1) ，时间复杂度：O(logn)O(logn)
//
// 示例1
// 输入：[3,4,5,1,2]
//
// 返回值：1
//
// 示例2
// 输入：[3,100,200,3]
//
// 返回值：3

void main() {
  print(min([3, 100, 200, 3]));
  print(min([3, 4, 5, 1, 2]));
  print(min([5, 6, 7, 1, 2, 3, 4]));
  print(min([3, 4, 5, 6, 1, 1, 2, 3]));
}

int min(List<int> nums) {
  if (nums.isEmpty) {
    return 0;
  }
  int l = 0;
  int r = nums.length - 1;
  while (l < r) {
    print("l:$l r:$r");
    int m = (l + r) ~/ 2;
    if (nums[m] > nums[r]) {
      l = m + 1;
    } else if (nums[m] < nums[r]) {
      r = m;
    } else {
      r--;
    }
  }
  return nums[l];
}
